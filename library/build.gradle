/*
 * Copyright 2012 - 2014 Benjamin Weiss
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
apply plugin: 'com.android.library'
apply plugin: 'android-maven'
apply plugin: 'signing'

buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:0.12.0'
        classpath 'com.github.dcendents:android-maven-plugin:1.0'
    }
}

dependencies {
  compile 'com.android.support:support-v4:19.1.0'
}

android {
  buildToolsVersion '20.0.0'
  compileSdkVersion 19
  defaultConfig {
    versionCode 10
    versionName = project.version
    minSdkVersion 8
    targetSdkVersion 19
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_6
    targetCompatibility JavaVersion.VERSION_1_6
  }
}

group = 'de.keyboardsurfer.android.widget'
artifactId = 'crouton'

android.libraryVariants.all { variant ->
  def name = variant.buildType.name
  if (name.equals(com.android.builder.core.BuilderConstants.DEBUG)) {
    return; // Skip debug builds.
  }
  task("javadoc${variant.name.capitalize()}", type: Javadoc) {
    description 'Generates Javadoc for $variant.name.'
    source = variant.javaCompile.source
    ext.androidJar = '${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar'
    classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
  }

  task("bundleJavadoc${variant.name.capitalize()}", type: Jar) {
    description 'Bundles Javadoc into zip for $variant.name'
    classifier = 'javadoc'
    from tasks["javadoc${variant.name.capitalize()}"]
  }

}

task sourcesJar(type: Jar) {
  classifier = 'sources'
  from android.sourceSets.main.java.srcDirs
}

task jar(type: Jar) {
  from 'build/intermediates/classes/release'
    exclude '**/BuildConfig.class'
    exclude '**/R.class'
    exclude 'de/keyboardsurfer/mobile/'
}

task javadocJar(type: Jar, dependsOn: "javadocRelease") {
  classifier = 'javadoc'
  from 'build/docs/javadoc'
}

artifacts {
  archives sourcesJar
  archives javadocJar
  archives jar
}

signing {
  sign configurations.archives
  sign configurations.compile
}

